name: Deploy to CPanel

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install and build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        echo "✅ Frontend build completed"
        
        # CRITICAL: Ensure ALL static assets are in dist
        echo "📁 Copying static assets from public to dist..."
        cp -r public/* dist/ 2>/dev/null || true
        cp public/.htaccess dist/.htaccess 2>/dev/null || true
        
        echo "📊 Frontend dist contents:"
        find dist -type f | sort
        echo "Total frontend files: $(find dist -type f | wc -l)"
        
    - name: Install and build backend
      run: |
        cd backend
        npm ci
        npm run build
        echo "✅ Backend build completed"
        echo "📊 Backend dist contents:"
        ls -la dist/
        
    - name: Prepare deployment package
      run: |
        # Create deployment directory
        mkdir -p deploy-package
        
        # Copy ALL frontend files to root of deploy package
        echo "📦 Copying frontend files..."
        cp -r frontend/dist/* deploy-package/
        cp -r frontend/dist/.* deploy-package/ 2>/dev/null || true
        
        # Create api directory and copy backend files
        echo "📦 Copying backend files..."
        mkdir -p deploy-package/api
        cp -r backend/dist/* deploy-package/api/
        cp backend/package.json deploy-package/api/
        cp backend/package-lock.json deploy-package/api/
        
        # Create production .env file
        cat > deploy-package/api/.env << EOF
        NODE_ENV=production
        PORT=3000
        FRONTEND_URL=https://marinemanagementsystem.com
        DATABASE_URL="mysql://username:password@localhost:3306/mms_db"
        SMTP_HOST=smtp.gmail.com
        SMTP_PORT=587
        SMTP_USER=your-email@gmail.com
        SMTP_PASS=your-app-password
        FROM_EMAIL=noreply@marinemanagementsystem.com
        CONTACT_EMAIL=info@marinemanagementsystem.com
        DEMO_EMAIL=demo@marinemanagementsystem.com
        JWT_SECRET=mms-super-secret-jwt-key-2024-production
        JWT_EXPIRE=30d
        RATE_LIMIT_WINDOW_MS=900000
        RATE_LIMIT_MAX_REQUESTS=100
        API_KEY=mms-api-key-production
        EOF
        
        echo "📊 Final deployment package contents:"
        find deploy-package -type f | sort
        echo "Total files to deploy: $(find deploy-package -type f | wc -l)"
        
        # Verify critical files exist
        echo "🔍 Verifying critical files..."
        [ -f deploy-package/index.html ] && echo "✅ index.html" || echo "❌ index.html MISSING!"
        [ -f deploy-package/logo.png ] && echo "✅ logo.png" || echo "❌ logo.png MISSING!"
        [ -f deploy-package/vite.svg ] && echo "✅ vite.svg" || echo "❌ vite.svg MISSING!"
        [ -f deploy-package/.htaccess ] && echo "✅ .htaccess" || echo "❌ .htaccess MISSING!"
        [ -d deploy-package/locales/tr ] && echo "✅ locales/tr directory" || echo "❌ locales/tr directory MISSING!"
        [ -f deploy-package/locales/tr/common.json ] && echo "✅ locales/tr/common.json" || echo "❌ locales/tr/common.json MISSING!"
        
    - name: Deploy to CPanel via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.CPANEL_FTP_HOST }}
        username: ${{ secrets.CPANEL_FTP_USER }}
        password: ${{ secrets.CPANEL_FTP_PASSWORD }}
        local-dir: ./deploy-package/
        server-dir: public_html/
        dangerous-clean-slate: true
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
        
    - name: Verify Deployment
      run: |
        echo "🔍 Waiting for deployment to complete..."
        sleep 30
        
        echo "📡 Testing deployed files..."
        
        # Test with curl and show response
        echo -e "\n🖼️ Testing logo.png..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://marinemanagementsystem.com/logo.png)
        [ "$response" = "200" ] && echo "✅ logo.png is accessible (HTTP $response)" || echo "❌ logo.png not found (HTTP $response)"
        
        echo -e "\n🎨 Testing vite.svg..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://marinemanagementsystem.com/vite.svg)
        [ "$response" = "200" ] && echo "✅ vite.svg is accessible (HTTP $response)" || echo "❌ vite.svg not found (HTTP $response)"
        
        echo -e "\n🌍 Testing translation file..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://marinemanagementsystem.com/locales/tr/common.json)
        [ "$response" = "200" ] && echo "✅ tr/common.json is accessible (HTTP $response)" || echo "❌ tr/common.json not found (HTTP $response)"
        
        echo -e "\n🏥 Testing API health..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://marinemanagementsystem.com/api/health)
        [ "$response" = "200" ] && echo "✅ API is running (HTTP $response)" || echo "❌ API not responding (HTTP $response)"
        
        echo -e "\n📋 Deployment Summary:"
        echo "🌐 Website: https://marinemanagementsystem.com"
        echo "🔗 API: https://marinemanagementsystem.com/api/health"
        echo ""
        echo "⚠️ If API returns 404, please:"
        echo "1. Go to CPanel → Setup Node.js App"
        echo "2. Click 'Restart' on your application"
        echo "3. Click 'Run NPM Install'" 