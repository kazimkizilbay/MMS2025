name: Deploy to CPanel

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json
    
    - name: Install and build frontend
      run: |
        cd frontend
        npm ci
        npm run build
        echo "✅ Frontend build completed"
        
        # CRITICAL: Ensure ALL static assets are in dist
        echo "📁 Copying static assets from public to dist..."
        
        # Debug: Show what's in public directory
        echo "📂 Contents of public directory:"
        ls -la public/
        
        # Debug: Show what's in dist directory BEFORE copy
        echo "📂 Contents of dist directory BEFORE copy:"
        ls -la dist/
        
        # Copy ALL files from public to dist, including hidden files
        echo "📋 Copying files..."
        cp -r public/. dist/
        
        # Debug: Show what's in dist directory AFTER copy
        echo "📂 Contents of dist directory AFTER copy:"
        ls -la dist/
        
        # Also check for nested directories
        echo "📂 Checking locales directory:"
        ls -la dist/locales/ || echo "No locales directory"
        if [ -d dist/locales/tr ]; then
          echo "📂 Contents of locales/tr:"
          ls -la dist/locales/tr/
        fi
        
        echo "📊 Frontend dist contents:"
        find dist -type f | sort
        echo "Total frontend files: $(find dist -type f | wc -l)"
        
    - name: Install and build backend
      run: |
        cd backend
        npm ci
        echo "🔧 Installing backend dependencies..."
        
        # Build TypeScript to JavaScript
        echo "📦 Compiling TypeScript to JavaScript..."
        npx tsc
        echo "✅ TypeScript compilation completed"
        
        # Debug: Show compiled files
        echo "📊 Backend dist contents:"
        find dist -type f | sort
        echo "Total backend compiled files: $(find dist -type f | wc -l)"
        
        # Verify critical files exist
        echo "🔍 Verifying critical backend files..."
        [ -f dist/app-mysql.js ] && echo "✅ app-mysql.js" || echo "❌ app-mysql.js MISSING!"
        [ -f dist/routes/admin-mysql.js ] && echo "✅ admin-mysql.js" || echo "❌ admin-mysql.js MISSING!"
        [ -f dist/config/mysql.js ] && echo "✅ mysql.js" || echo "❌ mysql.js MISSING!"
        
    - name: Prepare deployment package
      run: |
        # Create deployment directory
        mkdir -p deploy-package
        
        # Copy ALL frontend files to root of deploy package
        echo "📦 Copying frontend files..."
        # Use rsync to ensure ALL files are copied including hidden ones
        rsync -av frontend/dist/ deploy-package/
        
        # Create api directory and copy backend files
        echo "📦 Copying backend files..."
        mkdir -p deploy-package/api
        
        # Copy compiled JavaScript files (dist directory)
        echo "📁 Copying compiled backend files..."
        cp -r backend/dist/* deploy-package/api/
        
        # Copy package files for npm install
        cp backend/package.json deploy-package/api/
        cp backend/package-lock.json deploy-package/api/
        
        # Copy main app.js file (updated to use dist/app-mysql.js)
        cp backend/app.js deploy-package/api/
        
        # Copy database schema
        mkdir -p deploy-package/api/database
        cp backend/database/mysql-schema.sql deploy-package/api/database/
        
        # Copy .htaccess for Node.js routing
        cp backend/.htaccess deploy-package/api/
        
        # Copy the .htaccess file to the root of the deployment package
        echo "⚙️ Copying root .htaccess file..."
        cp .htaccess deploy-package/
        
        # Don't create .env file - use environment variables from cPanel instead
        echo "📝 Skipping .env file creation - using cPanel environment variables"
        
        echo "📊 Final deployment package contents:"
        find deploy-package -type f | sort
        echo "Total files to deploy: $(find deploy-package -type f | wc -l)"
        
        # Verify critical files exist
        echo "🔍 Verifying critical files..."
        [ -f deploy-package/index.html ] && echo "✅ index.html" || echo "❌ index.html MISSING!"
        [ -f deploy-package/logo.png ] && echo "✅ logo.png" || echo "❌ logo.png MISSING!"
        [ -f deploy-package/vite.svg ] && echo "✅ vite.svg" || echo "❌ vite.svg MISSING!"
        [ -f deploy-package/.htaccess ] && echo "✅ .htaccess" || echo "❌ .htaccess MISSING!"
        [ -f deploy-package/api/app.js ] && echo "✅ API app.js" || echo "❌ API app.js MISSING!"
        [ -f deploy-package/api/app-mysql.js ] && echo "✅ API app-mysql.js" || echo "❌ API app-mysql.js MISSING!"
        [ -f deploy-package/api/routes/admin-mysql.js ] && echo "✅ API admin-mysql.js" || echo "❌ API admin-mysql.js MISSING!"
        
    - name: Deploy to CPanel via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.CPANEL_FTP_HOST }}
        username: ${{ secrets.CPANEL_FTP_USER }}
        password: ${{ secrets.CPANEL_FTP_PASSWORD }}
        local-dir: ./deploy-package/
        server-dir: public_html/
        dangerous-clean-slate: true
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
          **/api/.env
          **/*.ts
          **/tsconfig.json
          **/src/**
        
    - name: Restart CPanel Node.js Application
      run: |
        echo "🔄 Attempting to restart cPanel Node.js application..."
        
        # Wait for files to be fully uploaded
        echo "⏱️ Waiting for file upload to complete..."
        sleep 15
        
        # Try to restart via cPanel API (if available)
        # This step might require cPanel API credentials
        if [ -n "${{ secrets.CPANEL_API_TOKEN }}" ]; then
          echo "🔧 Using cPanel API to restart Node.js app..."
          curl -X POST \
            -H "Authorization: cpanel ${{ secrets.CPANEL_USERNAME }}:${{ secrets.CPANEL_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"module":"NodeJSAPP","function":"restart_app","data":{"app_name":"marinemanagementsystem.com"}}' \
            "${{ secrets.CPANEL_API_URL }}/execute/NodeJSAPP/restart_app" || echo "⚠️ API restart failed, manual restart may be needed"
        else
          echo "⚠️ cPanel API token not configured, manual restart required"
        fi
        
    - name: Verify Deployment
      run: |
        echo "🔍 Waiting for deployment to complete..."
        sleep 45
        
        echo "📡 Testing deployed files..."
        
        # Test with curl and show response
        echo -e "\n🖼️ Testing logo.png..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://marinemanagementsystem.com/logo.png)
        [ "$response" = "200" ] && echo "✅ logo.png is accessible (HTTP $response)" || echo "❌ logo.png not found (HTTP $response)"
        
        echo -e "\n🎨 Testing vite.svg..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://marinemanagementsystem.com/vite.svg)
        [ "$response" = "200" ] && echo "✅ vite.svg is accessible (HTTP $response)" || echo "❌ vite.svg not found (HTTP $response)"
        
        echo -e "\n🌍 Testing translation file..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://marinemanagementsystem.com/locales/tr/common.json)
        [ "$response" = "200" ] && echo "✅ tr/common.json is accessible (HTTP $response)" || echo "❌ tr/common.json not found (HTTP $response)"
        
        echo -e "\n🏥 Testing API health..."
        response=$(curl -s -o /dev/null -w "%{http_code}" https://marinemanagementsystem.com/api/health)
        if [ "$response" = "200" ]; then
          echo "✅ API is running (HTTP $response)"
          # Test API response content
          api_response=$(curl -s https://marinemanagementsystem.com/api/health)
          echo "📋 API Response: $api_response"
        else
          echo "❌ API not responding (HTTP $response)"
        fi
        
        echo -e "\n🔐 Testing admin login endpoint..."
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -d '{"username":"test","password":"test"}' \
          https://marinemanagementsystem.com/api/admin/login)
        if [ "$response" = "401" ] || [ "$response" = "400" ]; then
          echo "✅ Admin login endpoint responding correctly (HTTP $response)"
        elif [ "$response" = "500" ]; then
          echo "❌ Admin login still has 500 error - check logs"
        else
          echo "⚠️ Admin login unexpected response (HTTP $response)"
        fi
        
        echo -e "\n📋 Deployment Summary:"
        echo "🌐 Website: https://marinemanagementsystem.com"
        echo "🔗 API Health: https://marinemanagementsystem.com/api/health"
        echo "🔐 Admin Login: https://marinemanagementsystem.com/admin"
        echo ""
        echo "🎯 Admin Login Credentials:"
        echo "   Username: admin"
        echo "   Password: admin123"
        echo ""
        echo "⚠️ If API still returns 500 error, manually:"
        echo "1. Go to CPanel → Setup Node.js App"
        echo "2. Click 'STOP APP' then 'START APP'"
        echo "3. Click 'Run NPM Install'"
        echo "4. Check error logs in CPanel" 